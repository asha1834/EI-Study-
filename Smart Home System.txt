Smart Home System Programming Exercise:

To create a Smart Home System simulation incorporating various design patterns and object-oriented principles, follow these steps. The implementation will be in Java, but the concepts can be adapted to other languages.

Overview
Devices: Each device (light, thermostat, door lock) will be represented with its own unique ID and type.
Central Hub: Manages devices and handles schedules, automation, and status updates.
Patterns:
Observer Pattern: Notify devices when changes occur.
Factory Method Pattern: Create instances of different devices.
Proxy Pattern: Control access to the devices.
Features:
Turn devices on/off.
Set schedules for devices.
Automate tasks based on triggers.
Implementation in Java

1. Device Interface and Concrete Classes
Define a common interface for devices and implement concrete classes for each device type.


code


// Device Interface
interface Device {
    void turnOn();
    void turnOff();
    String getStatus();
    int getId();
}

// Concrete Device Classes
class Light implements Device {
    private int id;
    private boolean isOn;

    public Light(int id) {
        this.id = id;
        this.isOn = false;
    }

    @Override
    public void turnOn() {
        isOn = true;
    }

    @Override
    public void turnOff() {
        isOn = false;
    }

    @Override
    public String getStatus() {
        return "Light " + id + " is " + (isOn ? "On" : "Off");
    }

    @Override
    public int getId() {
        return id;
    }
}

class Thermostat implements Device {
    private int id;
    private int temperature;

    public Thermostat(int id, int temperature) {
        this.id = id;
        this.temperature = temperature;
    }

    @Override
    public void turnOn() {
        // Thermostat doesn't have a simple on/off
    }

    @Override
    public void turnOff() {
        // Thermostat doesn't have a simple on/off
    }

    public void setTemperature(int temperature) {
        this.temperature = temperature;
    }

    @Override
    public String getStatus() {
        return "Thermostat " + id + " is set to " + temperature + " degrees";
    }

    @Override
    public int getId() {
        return id;
    }
}

class DoorLock implements Device {
    private int id;
    private boolean isLocked;

    public DoorLock(int id) {
        this.id = id;
        this.isLocked = true;
    }

    @Override
    public void turnOn() {
        // Door lock doesn't have a simple on/off
    }

    @Override
    public void turnOff() {
        // Door lock doesn't have a simple on/off
    }

    public void unlock() {
        isLocked = false;
    }

    public void lock() {
        isLocked = true;
    }

    @Override
    public String getStatus() {
        return "Door " + id + " is " + (isLocked ? "Locked" : "Unlocked");
    }

    @Override
    public int getId() {
        return id;
    }
}



2. Factory Method for Device Creation
Create a factory to generate different device types.




// Factory Method Interface
interface DeviceFactory {
    Device createDevice(int id, String type);
}

// Concrete Factory
class ConcreteDeviceFactory implements DeviceFactory {
    @Override
    public Device createDevice(int id, String type) {
        switch (type) {
            case "light":
                return new Light(id);
            case "thermostat":
                return new Thermostat(id, 70); // Default temperature
            case "door":
                return new DoorLock(id);
            default:
                throw new IllegalArgumentException("Unknown device type");
        }
    }
}



3. Proxy Pattern for Device Access
Use a proxy to control access to the devices.




// Proxy Interface
interface DeviceProxy {
    void turnOn();
    void turnOff();
    String getStatus();
    int getId();
}

// Proxy Implementation
class DeviceProxyImpl implements DeviceProxy {
    private Device device;

    public DeviceProxyImpl(Device device) {
        this.device = device;
    }

    @Override
    public void turnOn() {
        device.turnOn();
    }

    @Override
    public void turnOff() {
        device.turnOff();
    }

    @Override
    public String getStatus() {
        return device.getStatus();
    }

    @Override
    public int getId() {
        return device.getId();
    }
}



4. Observer Pattern for System Updates
Implement observers to handle notifications of changes.



import java.util.ArrayList;
import java.util.List;

// Observer Interface
interface Observer {
    void update();
}

// Subject Interface
interface Subject {
    void addObserver(Observer observer);
    void removeObserver(Observer observer);
    void notifyObservers();
}

// Central Hub
class SmartHomeHub implements Subject {
    private List<Observer> observers = new ArrayList<>();
    private List<DeviceProxy> devices = new ArrayList<>();
    private List<String> scheduledTasks = new ArrayList<>();
    private List<String> automatedTriggers = new ArrayList<>();

    @Override
    public void addObserver(Observer observer) {
        observers.add(observer);
    }

    @Override
    public void removeObserver(Observer observer) {
        observers.remove(observer);
    }

    @Override
    public void notifyObservers() {
        for (Observer observer : observers) {
            observer.update();
        }
    }

    public void addDevice(DeviceProxy device) {
        devices.add(device);
        notifyObservers();
    }

    public void removeDevice(DeviceProxy device) {
        devices.remove(device);
        notifyObservers();
    }

    public void scheduleTask(String task) {
        scheduledTasks.add(task);
        notifyObservers();
    }

    public void addAutomatedTrigger(String trigger) {
        automatedTriggers.add(trigger);
        notifyObservers();
    }

    public String getStatusReport() {
        StringBuilder report = new StringBuilder();
        for (DeviceProxy device : devices) {
            report.append(device.getStatus()).append("\n");
        }
        return report.toString();
    }

    public List<String> getScheduledTasks() {
        return scheduledTasks;
    }

    public List<String> getAutomatedTriggers() {
        return automatedTriggers;
    }
}



5. Main Application
The main class to simulate the smart home system.



import java.util.List;

public class SmartHomeSystem {

    public static void main(String[] args) {
        // Create devices and proxy
        DeviceFactory factory = new ConcreteDeviceFactory();
        DeviceProxy lightProxy = new DeviceProxyImpl(factory.createDevice(1, "light"));
        DeviceProxy thermostatProxy = new DeviceProxyImpl(factory.createDevice(2, "thermostat"));
        DeviceProxy doorProxy = new DeviceProxyImpl(factory.createDevice(3, "door"));

        // Initialize Smart Home Hub
        SmartHomeHub hub = new SmartHomeHub();

        // Add devices to hub
        hub.addDevice(lightProxy);
        hub.addDevice(thermostatProxy);
        hub.addDevice(doorProxy);

        // Schedule and automate
        hub.scheduleTask("Turn on light at 6:00 AM");
        hub.addAutomatedTrigger("Temperature > 75 -> Turn off light");

        // Example status
        System.out.println(hub.getStatusReport());
        System.out.println("Scheduled Tasks: " + hub.getScheduledTasks());
        System.out.println("Automated Triggers: " + hub.getAutomatedTriggers());
    }
}
